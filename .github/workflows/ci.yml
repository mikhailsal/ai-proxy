name: CI Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

env:
  # Force Docker-only testing as per DEVELOPMENT.md
  DOCKER_CONTAINER: true
  # Test environment variables
  API_KEYS: test-key-1,test-key-2
  OPENROUTER_API_KEY: test-openrouter-key
  GEMINI_API_KEY: test-gemini-key
  LOG_LEVEL: ERROR
  ENABLE_FILE_LOGGING: false

permissions:
  security-events: write

jobs:
  # Build Docker images and cache them
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and cache AI Proxy image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: ai-proxy:ci
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/ai-proxy.tar

      - name: Upload AI Proxy image artifact
        uses: actions/upload-artifact@v4
        with:
          name: ai-proxy-image
          path: /tmp/ai-proxy.tar
          retention-days: 1

      - name: Build and cache UI image
        uses: docker/build-push-action@v5
        with:
          context: ./ui
          file: ./ui/Dockerfile
          push: false
          tags: logs-ui-web:ci
          cache-from: type=gha,key=ui
          cache-to: type=gha,mode=max,key=ui
          outputs: type=docker,dest=/tmp/ui.tar

      - name: Upload UI image artifact
        uses: actions/upload-artifact@v4
        with:
          name: ui-image
          path: /tmp/ui.tar
          retention-days: 1

  # Unit Tests - mirrors `make test-unit`
  test-unit:
    name: Unit Tests (Docker)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download AI Proxy image
        uses: actions/download-artifact@v4
        with:
          name: ai-proxy-image
          path: /tmp

      - name: Load Docker image
        run: docker load --input /tmp/ai-proxy.tar

      - name: Set up Docker Compose
        run: |
          # Update .env with test configuration
          cp .env.example .env || touch .env
          echo "HOST_UID=$(id -u)" >> .env
          echo "HOST_GID=$(id -g)" >> .env
          # Create logs directory
          mkdir -p logs

      - name: Run unit tests
        run: |
          docker run --rm -e DOCKER_CONTAINER=true \
            -v "$PWD":/app -w /app \
            ai-proxy:ci \
            poetry run pytest tests/unit -q --tb=line -n auto \
            --junitxml=logs/unit-test-results.xml

      - name: Upload unit test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results
          path: logs/unit-test-results.xml

  # Integration Tests - mirrors `make test-integration`
  test-integration:
    name: Integration Tests (Docker)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download AI Proxy image
        uses: actions/download-artifact@v4
        with:
          name: ai-proxy-image
          path: /tmp

      - name: Load Docker image
        run: docker load --input /tmp/ai-proxy.tar

      - name: Set up Docker Compose
        run: |
          cp .env.example .env || touch .env
          echo "HOST_UID=$(id -u)" >> .env
          echo "HOST_GID=$(id -g)" >> .env
          # Create logs directory
          mkdir -p logs

      - name: Run integration tests
        run: |
          if [ -n "$(find tests/integration -name 'test_*.py' -type f 2>/dev/null)" ]; then
            docker run --rm -e DOCKER_CONTAINER=true \
              -v "$PWD":/app -w /app \
              ai-proxy:ci \
              poetry run pytest tests/integration -q --tb=line \
              --junitxml=logs/integration-test-results.xml
          else
            echo "No integration tests found, skipping..."
            echo '<?xml version="1.0"?><testsuites><testsuite name="integration" tests="0" failures="0" errors="0" skipped="0"></testsuite></testsuites>' > logs/integration-test-results.xml
          fi

      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: logs/integration-test-results.xml

  # UI Unit Tests - mirrors `make test-ui`
  test-ui:
    name: UI Unit Tests (Docker Node)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Node modules
        uses: actions/cache@v4
        with:
          path: ui/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('ui/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Run UI unit tests
        run: |
          docker run --rm \
            -v "$PWD/ui":/app \
            -w /app \
            node:20 \
            bash -c "npm install && npm run test"

  # UI E2E Tests - mirrors `make test-ui-e2e`
  test-ui-e2e:
    name: UI E2E Tests (Playwright)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Node modules
        uses: actions/cache@v4
        with:
          path: ui/node_modules
          key: ${{ runner.os }}-node-playwright-${{ hashFiles('ui/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-playwright-

      - name: Run UI E2E tests
        run: |
          docker run --rm \
            -v "$PWD/ui":/app \
            -w /app \
            --ipc=host \
            mcr.microsoft.com/playwright:v1.55.0-jammy \
            bash -lc "npm ci --no-audit --fund=false --loglevel=error && UI_NO_WEBSERVER= npx playwright test --reporter=list"

  # Coverage - mirrors `make coverage`
  coverage:
    name: Code Coverage (Docker)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download AI Proxy image
        uses: actions/download-artifact@v4
        with:
          name: ai-proxy-image
          path: /tmp

      - name: Load Docker image
        run: docker load --input /tmp/ai-proxy.tar

      - name: Set up Docker Compose
        run: |
          cp .env.example .env || touch .env
          echo "HOST_UID=$(id -u)" >> .env
          echo "HOST_GID=$(id -g)" >> .env
          # Create logs directory
          mkdir -p logs

      - name: Run coverage
        run: |
          docker run --rm -e DOCKER_CONTAINER=true -e COVERAGE_FILE=/app/logs/.coverage \
            -v "$PWD":/app -w /app \
            ai-proxy:ci \
            poetry run pytest tests/ --tb=line \
            --cov=ai_proxy --cov=ai_proxy_ui --cov=scripts \
            --cov-report=term-missing --cov-report=html:logs/coverage-html \
            --cov-report=xml:logs/coverage.xml

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        if: always()
        with:
          file: logs/coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload coverage HTML report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-html-report
          path: logs/coverage-html/

  # Linting and Type Checking
  lint-and-type-check:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download AI Proxy image
        uses: actions/download-artifact@v4
        with:
          name: ai-proxy-image
          path: /tmp

      - name: Load Docker image
        run: docker load --input /tmp/ai-proxy.tar

      - name: Run Python linting
        run: |
          docker run --rm -v "$PWD":/app ai-proxy:ci \
            poetry run ruff check ai_proxy/ ai_proxy_ui/ tests/

      - name: Run Python formatting check
        run: |
          docker run --rm -v "$PWD":/app ai-proxy:ci \
            poetry run ruff format --check ai_proxy/ ai_proxy_ui/ tests/

      - name: Run Python type checking
        run: |
          docker run --rm -v "$PWD":/app ai-proxy:ci \
            poetry run mypy ai_proxy/ ai_proxy_ui/ scripts/

      - name: Run UI linting
        run: |
          docker run --rm \
            -v "$PWD/ui":/app \
            -w /app \
            node:20 \
            bash -c "npm install && npm run lint"

      - name: Run UI type checking
        run: |
          docker run --rm \
            -v "$PWD/ui":/app \
            -w /app \
            node:20 \
            bash -c "npm install && npm run typecheck"

  # Functional Tests (Optional - only run on push to main/master)
  test-functional:
    name: Functional Tests (Optional)
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download AI Proxy image
        uses: actions/download-artifact@v4
        with:
          name: ai-proxy-image
          path: /tmp

      - name: Load Docker image
        run: docker load --input /tmp/ai-proxy.tar

      - name: Set up test environment
        run: |
          cp .env.example .env || touch .env
          echo "HOST_UID=$(id -u)" >> .env
          echo "HOST_GID=$(id -g)" >> .env
          mkdir -p logs
          chmod -R 777 logs

      - name: Run general functional tests (no external API costs)
        run: |
          TEST_PATH=tests/functional/test_general.py \
          docker compose -f docker-compose.test.yml up --build --abort-on-container-exit --remove-orphans || \
          (echo "❌ General functional tests FAILED!" && \
           docker compose -f docker-compose.test.yml logs pytest && \
           docker compose -f docker-compose.test.yml down -v && exit 1)
          docker compose -f docker-compose.test.yml down -v > /dev/null 2>&1

  # Final status check
  ci-success:
    name: CI Pipeline Success
    runs-on: ubuntu-latest
    needs: [build, test-unit, test-integration, test-ui, test-ui-e2e, coverage, lint-and-type-check]
    if: always()
    steps:
      - name: Check all jobs status
        run: |
          if [[ "${{ needs.build.result }}" != "success" ||
                "${{ needs.test-unit.result }}" != "success" ||
                "${{ needs.test-integration.result }}" != "success" ||
                "${{ needs.test-ui.result }}" != "success" ||
                "${{ needs.test-ui-e2e.result }}" != "success" ||
                "${{ needs.coverage.result }}" != "success" ||
                "${{ needs.lint-and-type-check.result }}" != "success" ]]; then
            echo "❌ One or more CI jobs failed"
            exit 1
          else
            echo "✅ All CI jobs completed successfully"
          fi
