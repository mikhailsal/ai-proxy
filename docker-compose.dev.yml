# Development environment overrides for docker-compose.yml
# Usage: docker compose -f docker-compose.yml -f docker-compose.dev.yml up
# Or use: make dev

services:
  # Override logs-ui-web to use Vite dev server instead of nginx
  logs-ui-web:
    image: logs-ui-web:dev
    build:
      context: ./ui
      dockerfile: Dockerfile.dev
    container_name: logs-ui-web-dev
    ports:
      - "127.0.0.1:5174:5174"  # Vite dev server port (localhost-only, using 5174 to avoid conflict with production)
    volumes:
      # Mount source code for hot reload
      - ./ui/src:/app/src:ro
      - ./ui/index.html:/app/index.html:ro
      - ./ui/vite.config.ts:/app/vite.config.ts:ro
      - ./ui/tsconfig.json:/app/tsconfig.json:ro
      - ./ui/package.json:/app/package.json:ro
      - ./ui/package-lock.json:/app/package-lock.json:ro
      # Keep node_modules in container (not synced from host)
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - VITE_API_BASE_URL=http://logs-ui-api:8124
    command: npm run dev
    labels:
      # Update Traefik labels for dev server
      - "traefik.enable=true"
      - "traefik.http.routers.logs-ui-web.rule=Host(`logs.${BASE_DOMAIN:-${DOMAIN:-localhost}}`)"
      - "traefik.http.routers.logs-ui-web.entrypoints=websecure"
      - "traefik.http.routers.logs-ui-web.tls=true"
      - "traefik.http.routers.logs-ui-web.tls.certresolver=letsencrypt"
      - "traefik.http.services.logs-ui-web-dev.loadbalancer.server.port=5173"

  # Backend API already has --reload, but ensure it's optimized for dev
  logs-ui-api:
    volumes:
      # Make sure Python code is mounted for hot reload
      - ./ai_proxy_ui:/app/ai_proxy_ui
      - ./ai_proxy:/app/ai_proxy
      - ./logs/db:/app/logs/db:ro
      - ./scripts:/app/scripts:ro
