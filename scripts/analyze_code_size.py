#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–¥–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —É–º–µ–Ω—å—à–µ–Ω–∏—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤.
"""

import os
import sys
from pathlib import Path
from typing import List, Tuple, Dict
from dataclasses import dataclass


@dataclass
class FileStats:
    path: str
    lines: int
    functions: int
    classes: int


class CodeAnalyzer:
    def __init__(self, root_dir: str):
        self.root_dir = Path(root_dir)

    def analyze_file(self, file_path: Path) -> FileStats:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª"""
        lines = 0
        functions = 0
        classes = 0

        try:
            with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                for line in f:
                    lines += 1
                    stripped = line.strip()
                    if stripped.startswith('def '):
                        functions += 1
                    elif stripped.startswith('class '):
                        classes += 1
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
            return FileStats(str(file_path), 0, 0, 0)

        return FileStats(str(file_path), lines, functions, classes)

    def find_python_files(self) -> List[Path]:
        """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ Python —Ñ–∞–π–ª—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ"""
        python_files = []
        for root, dirs, files in os.walk(self.root_dir):
            # –ò—Å–∫–ª—é—á–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            dirs[:] = [d for d in dirs if not d.startswith('.') and d not in ['__pycache__', 'node_modules']]

            for file in files:
                if file.endswith('.py'):
                    python_files.append(Path(root) / file)

        return python_files

    def analyze_project(self) -> Dict[str, List[FileStats]]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–µ—Å—å –ø—Ä–æ–µ–∫—Ç"""
        python_files = self.find_python_files()
        results = {
            'critical': [],  # > 500 —Å—Ç—Ä–æ–∫
            'warning': [],   # 300-500 —Å—Ç—Ä–æ–∫
            'normal': [],    # < 300 —Å—Ç—Ä–æ–∫
            'summary': []
        }

        total_lines = 0
        total_functions = 0
        total_classes = 0

        for file_path in python_files:
            stats = self.analyze_file(file_path)
            total_lines += stats.lines
            total_functions += stats.functions
            total_classes += stats.classes

            if stats.lines > 500:
                results['critical'].append(stats)
            elif stats.lines > 300:
                results['warning'].append(stats)
            else:
                results['normal'].append(stats)

        results['summary'] = [{
            'total_files': len(python_files),
            'total_lines': total_lines,
            'total_functions': total_functions,
            'total_classes': total_classes,
            'critical_files': len(results['critical']),
            'warning_files': len(results['warning']),
            'normal_files': len(results['normal'])
        }]

        return results

    def print_report(self, results: Dict[str, List[FileStats]]) -> None:
        """–ü–µ—á–∞—Ç–∞–µ—Ç –æ—Ç—á–µ—Ç"""
        print("üöÄ –ê–ù–ê–õ–ò–ó –†–ê–ó–ú–ï–†–ê –ö–û–î–ê AI-PROXY –ü–†–û–ï–ö–¢–ê")
        print("=" * 60)

        # –°–≤–æ–¥–∫–∞
        summary = results['summary'][0]
        print("üìä –°–í–û–î–ö–ê:")
        print(f"  –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {summary['total_files']}")
        print(",")
        print(f"  –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {summary['total_functions']}")
        print(f"  –í—Å–µ–≥–æ –∫–ª–∞—Å—Å–æ–≤: {summary['total_classes']}")
        print()

        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
        if results['critical']:
            print("üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –§–ê–ô–õ–´ (>500 —Å—Ç—Ä–æ–∫):")
            for file in sorted(results['critical'], key=lambda x: x.lines, reverse=True):
                print("6")
            print()

        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        if results['warning']:
            print("üü° –§–ê–ô–õ–´ –¢–†–ï–ë–£–Æ–©–ò–ï –í–ù–ò–ú–ê–ù–ò–Ø (300-500 —Å—Ç—Ä–æ–∫):")
            for file in sorted(results['warning'], key=lambda x: x.lines, reverse=True):
                print("6")
            print()

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        if results['critical']:
            print("  ‚Ä¢ –†–∞–∑–±–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –Ω–∞ –º–æ–¥—É–ª–∏")
            print("  ‚Ä¢ –í—ã–¥–µ–ª–∏—Ç—å –æ–±—â—É—é –ª–æ–≥–∏–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã")
            print("  ‚Ä¢ –°–æ–∑–¥–∞—Ç—å —Ñ–∞–±—Ä–∏–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        if results['warning']:
            print("  ‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è")
            print("  ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞")

        if not results['critical'] and not results['warning']:
            print("  ‚úÖ –û—Ç–ª–∏—á–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–¥–∞! –í—Å–µ —Ñ–∞–π–ª—ã –≤ –Ω–æ—Ä–º–µ.")

        print()
        print("üìà –¶–ï–õ–ò –†–ï–§–ê–ö–¢–û–†–ò–ù–ì–ê:")
        print("  ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: < 300 —Å—Ç—Ä–æ–∫")
        print("  ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: < 150 —Å—Ç—Ä–æ–∫")
        print("  ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –≤ –º–æ–¥—É–ª–µ: < 10")


def main():
    if len(sys.argv) > 1:
        root_dir = sys.argv[1]
    else:
        root_dir = "/home/tass/myprojects/ai-proxy"

    analyzer = CodeAnalyzer(root_dir)
    results = analyzer.analyze_project()
    analyzer.print_report(results)


if __name__ == "__main__":
    main()
